LF ty : type =
| base : ty
| arr  : ty → ty → ty
;
%name ty T.

LF tm : ty → type =
| abs : (tm A → tm B) → tm (arr A B)
| app : tm (arr A B) → tm A → tm B
;
%name tm M.

schema ctx = tm A;

LF step : tm A → tm A → type =
| rbeta : step (app (abs M) N) (M N)
| rabs  : ({x : tm A} step (M x) (M' x)) → step (abs M) (abs M')
| rappl : step M M' → step (app M N) (app M' N)
| rappr : step N N' → step (app M N) (app M N')
;
